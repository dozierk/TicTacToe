This was created as the result of an interview. The info below shows my progress throughout the few hours I spent on the project and how I would fix it at a later time.

Tic Tac Toe game created in Swift. Tested on the simulator, iPod, and iPad. No constraints on the Game Controller, but all UI should be visible on any device. Reset game was a bit cut off on the iPod device. Game does give player an option to choose X or O. Didn't get to implement much on the AI side, but laid out some future steps I'd like to take once as I still intend to complete this challenge. 

There is a bug. The reset game button should only appear when a player has won or the game is a draw. Initially the reset game button does appear when the game is started, but disappears once the first move is made. This only happens while playing the game for the first time.

To fix the UI for Game Controller, I'd place all of the X and O buttons (3 x 3) in 3 horizontal stackviews. Then place them in one large view (Button Stack View). Then take the Button Stack View and place it in another stack view with the start Game button. Of course, there's still the grid that the buttons are aligned within, but I haven't figured that one out quite yet. I'll have to fiddle a bit more with that layout.

The AI file is where all AI implementation is handled. Initially a start with satisfying all required functions and protocols and each of the variables. Set up Didn't have much time to go further with this part, but there's plenty of potential code. Ran into a hangup when trying to have the AI class conform to NSObject, GKGameModel, GKGameModelPlayer, and GKGameModelUpdate. My thoughts were to then remove the protocols and created extensions. Instead creating classes to separate the model logic to house data required to function and actually implement movement logic in the Move class. In the future, will work on GKGameModel implement and having the AI class conform to that protocol. Should make the code a bit cleaner and concise.
